// Apply plugins
plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'eclipse'
    id 'checkstyle'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.github.johnrengelman.shadow' version '2.0.4'
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = getVersionName()

// Default tasks
defaultTasks 'licenseFormat', 'check', 'build', 'shadowJar'

// Extended project information
ext.projectName = 'Prism'
ext.inceptionYear = '2015'
ext.packaging = 'jar'
ext.url = 'http://helion3.com/'
ext.description = 'Prism'
ext.organization = 'Helion3'

// Define variables
ext.buildNumber = project.hasProperty("buildNumber") ? buildNumber : '0'
ext.ciSystem = project.hasProperty("ciSystem") ? ciSystem : 'unknown'
ext.commit = project.hasProperty("commit") ? commit : 'unknown'

// Project repositories
repositories {
    jcenter()
    maven {
        name 'Sponge Maven Repository'
        url 'https://repo.spongepowered.org/maven'
    }
}

// Project dependencies
dependencies {
    compile 'org.spongepowered:spongeapi:7.1.0'
    compile 'org.mongodb:mongo-java-driver:3.8.1'
    compile 'com.zaxxer:HikariCP:2.6.3'
}

shadowJar {
  dependencies {
    include(dependency('org.mongodb:.*'))
  }
}

// Filter, process, and include resources
processResources {
    // Include in final JAR
    from 'LICENSE.txt'
}

// License header formatting
license {
    ext.name = project.projectName
    ext.organization = project.organization
    ext.url = project.url
    ext.year = project.inceptionYear
    exclude "**/*.info"
    exclude "assets/**"
    header file('HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
        "name" : project.name,
        "organization" : project.organization,
        "url" : project.url,
        "year" : project.inceptionYear
    ]
    configFile = file("checkstyle.xml")
}

// Source compiler configuration
configure([compileJava, compileTestJava]) {
    options.compilerArgs += [ '-Xlint:all', '-Xlint:-path' ]
    options.deprecation = true
    options.encoding = 'utf8'
}

// JAR manifest configuration
jar.manifest.mainAttributes(
    "Built-By": System.properties['user.name'],
    "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
    "Implementation-Title": name,
    "Implementation-Version": version + "+" + ciSystem + "-b" + buildNumber + ".git-" + commit,
    "Implementation-Vendor": url)
